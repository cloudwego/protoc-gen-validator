// protoc生成代码兼容proto2的语法

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: psm/psm.proto

package psm

import (
	_ "a/b/c/kitex_gen/api"
	other "a/b/c/kitex_gen/other"
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumType int32

const (
	EnumType_TWEET   EnumType = 0
	EnumType_RETWEET EnumType = 1
)

// Enum value maps for EnumType.
var (
	EnumType_name = map[int32]string{
		0: "TWEET",
		1: "RETWEET",
	}
	EnumType_value = map[string]int32{
		"TWEET":   0,
		"RETWEET": 1,
	}
)

func (x EnumType) Enum() *EnumType {
	p := new(EnumType)
	*p = x
	return p
}

func (x EnumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumType) Descriptor() protoreflect.EnumDescriptor {
	return file_psm_psm_proto_enumTypes[0].Descriptor()
}

func (EnumType) Type() protoreflect.EnumType {
	return &file_psm_psm_proto_enumTypes[0]
}

func (x EnumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumType.Descriptor instead.
func (EnumType) EnumDescriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{0}
}

type IntValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32Const int32   `protobuf:"varint,1,opt,name=Int32Const,proto3" json:"Int32Const,omitempty"`
	SIntLt     int32   `protobuf:"zigzag32,2,opt,name=SIntLt,proto3" json:"SIntLt,omitempty"`
	SFix32Lte  int32   `protobuf:"fixed32,3,opt,name=SFix32Lte,proto3" json:"SFix32Lte,omitempty"`
	UIntGt     uint32  `protobuf:"varint,4,opt,name=UIntGt,proto3" json:"UIntGt,omitempty"`
	Uint64Gte  *uint64 `protobuf:"varint,5,opt,name=uint64Gte,proto3,oneof" json:"uint64Gte,omitempty"`
	Fix32In    *uint32 `protobuf:"fixed32,6,opt,name=Fix32In,proto3,oneof" json:"Fix32In,omitempty"`
	Fix64Notin *uint64 `protobuf:"fixed64,7,opt,name=Fix64Notin,proto3,oneof" json:"Fix64Notin,omitempty"`
	Reference  *int32  `protobuf:"fixed32,8,opt,name=Reference,proto3,oneof" json:"Reference,omitempty"`
}

func (x *IntValidate) Reset() {
	*x = IntValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntValidate) ProtoMessage() {}

func (x *IntValidate) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntValidate.ProtoReflect.Descriptor instead.
func (*IntValidate) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{0}
}

func (x *IntValidate) GetInt32Const() int32 {
	if x != nil {
		return x.Int32Const
	}
	return 0
}

func (x *IntValidate) GetSIntLt() int32 {
	if x != nil {
		return x.SIntLt
	}
	return 0
}

func (x *IntValidate) GetSFix32Lte() int32 {
	if x != nil {
		return x.SFix32Lte
	}
	return 0
}

func (x *IntValidate) GetUIntGt() uint32 {
	if x != nil {
		return x.UIntGt
	}
	return 0
}

func (x *IntValidate) GetUint64Gte() uint64 {
	if x != nil && x.Uint64Gte != nil {
		return *x.Uint64Gte
	}
	return 0
}

func (x *IntValidate) GetFix32In() uint32 {
	if x != nil && x.Fix32In != nil {
		return *x.Fix32In
	}
	return 0
}

func (x *IntValidate) GetFix64Notin() uint64 {
	if x != nil && x.Fix64Notin != nil {
		return *x.Fix64Notin
	}
	return 0
}

func (x *IntValidate) GetReference() int32 {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return 0
}

type DoubleValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleConst *float64 `protobuf:"fixed64,1,opt,name=DoubleConst,proto3,oneof" json:"DoubleConst,omitempty"`
	FloatLt     *float32 `protobuf:"fixed32,2,opt,name=FloatLt,proto3,oneof" json:"FloatLt,omitempty"`
	DoubleLe    *float64 `protobuf:"fixed64,3,opt,name=DoubleLe,proto3,oneof" json:"DoubleLe,omitempty"`
	DoubleGt    *float64 `protobuf:"fixed64,4,opt,name=DoubleGt,proto3,oneof" json:"DoubleGt,omitempty"`
	DoubleGe    *float64 `protobuf:"fixed64,5,opt,name=DoubleGe,proto3,oneof" json:"DoubleGe,omitempty"`
	DoubleIn    *float64 `protobuf:"fixed64,6,opt,name=DoubleIn,proto3,oneof" json:"DoubleIn,omitempty"`
	DoubleNotin *float64 `protobuf:"fixed64,7,opt,name=DoubleNotin,proto3,oneof" json:"DoubleNotin,omitempty"`
	Reference   *float64 `protobuf:"fixed64,8,opt,name=Reference,proto3,oneof" json:"Reference,omitempty"`
}

func (x *DoubleValidate) Reset() {
	*x = DoubleValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleValidate) ProtoMessage() {}

func (x *DoubleValidate) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleValidate.ProtoReflect.Descriptor instead.
func (*DoubleValidate) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{1}
}

func (x *DoubleValidate) GetDoubleConst() float64 {
	if x != nil && x.DoubleConst != nil {
		return *x.DoubleConst
	}
	return 0
}

func (x *DoubleValidate) GetFloatLt() float32 {
	if x != nil && x.FloatLt != nil {
		return *x.FloatLt
	}
	return 0
}

func (x *DoubleValidate) GetDoubleLe() float64 {
	if x != nil && x.DoubleLe != nil {
		return *x.DoubleLe
	}
	return 0
}

func (x *DoubleValidate) GetDoubleGt() float64 {
	if x != nil && x.DoubleGt != nil {
		return *x.DoubleGt
	}
	return 0
}

func (x *DoubleValidate) GetDoubleGe() float64 {
	if x != nil && x.DoubleGe != nil {
		return *x.DoubleGe
	}
	return 0
}

func (x *DoubleValidate) GetDoubleIn() float64 {
	if x != nil && x.DoubleIn != nil {
		return *x.DoubleIn
	}
	return 0
}

func (x *DoubleValidate) GetDoubleNotin() float64 {
	if x != nil && x.DoubleNotin != nil {
		return *x.DoubleNotin
	}
	return 0
}

func (x *DoubleValidate) GetReference() float64 {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return 0
}

type BoolValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoolConst *bool `protobuf:"varint,1,opt,name=BoolConst,proto3,oneof" json:"BoolConst,omitempty"`
	Reference *bool `protobuf:"varint,2,opt,name=Reference,proto3,oneof" json:"Reference,omitempty"`
}

func (x *BoolValidator) Reset() {
	*x = BoolValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolValidator) ProtoMessage() {}

func (x *BoolValidator) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolValidator.ProtoReflect.Descriptor instead.
func (*BoolValidator) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{2}
}

func (x *BoolValidator) GetBoolConst() bool {
	if x != nil && x.BoolConst != nil {
		return *x.BoolConst
	}
	return false
}

func (x *BoolValidator) GetReference() bool {
	if x != nil && x.Reference != nil {
		return *x.Reference
	}
	return false
}

type StringValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringConst      *string `protobuf:"bytes,1,opt,name=StringConst,proto3,oneof" json:"StringConst,omitempty"`
	StringMinSize    *string `protobuf:"bytes,2,opt,name=StringMinSize,proto3,oneof" json:"StringMinSize,omitempty"`
	StringMaxSize    *string `protobuf:"bytes,3,opt,name=StringMaxSize,proto3,oneof" json:"StringMaxSize,omitempty"`
	StringPattern    *string `protobuf:"bytes,4,opt,name=StringPattern,proto3,oneof" json:"StringPattern,omitempty"`
	StringPrefix     *string `protobuf:"bytes,5,opt,name=StringPrefix,proto3,oneof" json:"StringPrefix,omitempty"`
	StringSuffix     *string `protobuf:"bytes,6,opt,name=StringSuffix,proto3,oneof" json:"StringSuffix,omitempty"`
	StringContain    *string `protobuf:"bytes,7,opt,name=StringContain,proto3,oneof" json:"StringContain,omitempty"`
	StringNotContain *string `protobuf:"bytes,8,opt,name=StringNotContain,proto3,oneof" json:"StringNotContain,omitempty"`
	StringIn         *string `protobuf:"bytes,9,opt,name=StringIn,proto3,oneof" json:"StringIn,omitempty"`
	StringNotIn      *string `protobuf:"bytes,10,opt,name=StringNotIn,proto3,oneof" json:"StringNotIn,omitempty"`
}

func (x *StringValidate) Reset() {
	*x = StringValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValidate) ProtoMessage() {}

func (x *StringValidate) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValidate.ProtoReflect.Descriptor instead.
func (*StringValidate) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{3}
}

func (x *StringValidate) GetStringConst() string {
	if x != nil && x.StringConst != nil {
		return *x.StringConst
	}
	return ""
}

func (x *StringValidate) GetStringMinSize() string {
	if x != nil && x.StringMinSize != nil {
		return *x.StringMinSize
	}
	return ""
}

func (x *StringValidate) GetStringMaxSize() string {
	if x != nil && x.StringMaxSize != nil {
		return *x.StringMaxSize
	}
	return ""
}

func (x *StringValidate) GetStringPattern() string {
	if x != nil && x.StringPattern != nil {
		return *x.StringPattern
	}
	return ""
}

func (x *StringValidate) GetStringPrefix() string {
	if x != nil && x.StringPrefix != nil {
		return *x.StringPrefix
	}
	return ""
}

func (x *StringValidate) GetStringSuffix() string {
	if x != nil && x.StringSuffix != nil {
		return *x.StringSuffix
	}
	return ""
}

func (x *StringValidate) GetStringContain() string {
	if x != nil && x.StringContain != nil {
		return *x.StringContain
	}
	return ""
}

func (x *StringValidate) GetStringNotContain() string {
	if x != nil && x.StringNotContain != nil {
		return *x.StringNotContain
	}
	return ""
}

func (x *StringValidate) GetStringIn() string {
	if x != nil && x.StringIn != nil {
		return *x.StringIn
	}
	return ""
}

func (x *StringValidate) GetStringNotIn() string {
	if x != nil && x.StringNotIn != nil {
		return *x.StringNotIn
	}
	return ""
}

type BytesValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesConst      []byte `protobuf:"bytes,1,opt,name=bytesConst,proto3,oneof" json:"bytesConst,omitempty"`
	BytesMinSize    []byte `protobuf:"bytes,2,opt,name=bytesMinSize,proto3,oneof" json:"bytesMinSize,omitempty"`
	BytesMaxSize    []byte `protobuf:"bytes,3,opt,name=bytesMaxSize,proto3,oneof" json:"bytesMaxSize,omitempty"`
	BytesPattern    []byte `protobuf:"bytes,4,opt,name=bytesPattern,proto3,oneof" json:"bytesPattern,omitempty"`
	BytesPrefix     []byte `protobuf:"bytes,5,opt,name=bytesPrefix,proto3,oneof" json:"bytesPrefix,omitempty"`
	BytesSuffix     []byte `protobuf:"bytes,6,opt,name=bytesSuffix,proto3,oneof" json:"bytesSuffix,omitempty"`
	BytesContain    []byte `protobuf:"bytes,7,opt,name=bytesContain,proto3,oneof" json:"bytesContain,omitempty"`
	BytesNotContain []byte `protobuf:"bytes,8,opt,name=bytesNotContain,proto3,oneof" json:"bytesNotContain,omitempty"`
	BytesIn         []byte `protobuf:"bytes,9,opt,name=bytesIn,proto3,oneof" json:"bytesIn,omitempty"`
	BytesNotIn      []byte `protobuf:"bytes,10,opt,name=bytesNotIn,proto3,oneof" json:"bytesNotIn,omitempty"`
}

func (x *BytesValidate) Reset() {
	*x = BytesValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesValidate) ProtoMessage() {}

func (x *BytesValidate) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesValidate.ProtoReflect.Descriptor instead.
func (*BytesValidate) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{4}
}

func (x *BytesValidate) GetBytesConst() []byte {
	if x != nil {
		return x.BytesConst
	}
	return nil
}

func (x *BytesValidate) GetBytesMinSize() []byte {
	if x != nil {
		return x.BytesMinSize
	}
	return nil
}

func (x *BytesValidate) GetBytesMaxSize() []byte {
	if x != nil {
		return x.BytesMaxSize
	}
	return nil
}

func (x *BytesValidate) GetBytesPattern() []byte {
	if x != nil {
		return x.BytesPattern
	}
	return nil
}

func (x *BytesValidate) GetBytesPrefix() []byte {
	if x != nil {
		return x.BytesPrefix
	}
	return nil
}

func (x *BytesValidate) GetBytesSuffix() []byte {
	if x != nil {
		return x.BytesSuffix
	}
	return nil
}

func (x *BytesValidate) GetBytesContain() []byte {
	if x != nil {
		return x.BytesContain
	}
	return nil
}

func (x *BytesValidate) GetBytesNotContain() []byte {
	if x != nil {
		return x.BytesNotContain
	}
	return nil
}

func (x *BytesValidate) GetBytesIn() []byte {
	if x != nil {
		return x.BytesIn
	}
	return nil
}

func (x *BytesValidate) GetBytesNotIn() []byte {
	if x != nil {
		return x.BytesNotIn
	}
	return nil
}

type EnumValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enum1          *EnumType            `protobuf:"varint,1,opt,name=Enum1,proto3,enum=psm.EnumType,oneof" json:"Enum1,omitempty"`
	Enum2          *EnumType2           `protobuf:"varint,2,opt,name=Enum2,proto3,enum=psm.EnumType2,oneof" json:"Enum2,omitempty"`
	Enum3          *other.OtherEnumType `protobuf:"varint,3,opt,name=Enum3,proto3,enum=other.OtherEnumType,oneof" json:"Enum3,omitempty"`
	EnumDefineOnly *EnumType            `protobuf:"varint,4,opt,name=EnumDefineOnly,proto3,enum=psm.EnumType,oneof" json:"EnumDefineOnly,omitempty"`
}

func (x *EnumValidate) Reset() {
	*x = EnumValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValidate) ProtoMessage() {}

func (x *EnumValidate) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValidate.ProtoReflect.Descriptor instead.
func (*EnumValidate) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{5}
}

func (x *EnumValidate) GetEnum1() EnumType {
	if x != nil && x.Enum1 != nil {
		return *x.Enum1
	}
	return EnumType_TWEET
}

func (x *EnumValidate) GetEnum2() EnumType2 {
	if x != nil && x.Enum2 != nil {
		return *x.Enum2
	}
	return EnumType2_TWEET2
}

func (x *EnumValidate) GetEnum3() other.OtherEnumType {
	if x != nil && x.Enum3 != nil {
		return *x.Enum3
	}
	return other.OtherEnumType(0)
}

func (x *EnumValidate) GetEnumDefineOnly() EnumType {
	if x != nil && x.EnumDefineOnly != nil {
		return *x.EnumDefineOnly
	}
	return EnumType_TWEET
}

type ListValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListMinSize  []string              `protobuf:"bytes,1,rep,name=ListMinSize,proto3" json:"ListMinSize,omitempty"`
	ListMaxSize  []string              `protobuf:"bytes,2,rep,name=ListMaxSize,proto3" json:"ListMaxSize,omitempty"`
	ListBaseElem []string              `protobuf:"bytes,3,rep,name=ListBaseElem,proto3" json:"ListBaseElem,omitempty"`
	ListMsgElem  []*BytesValidate      `protobuf:"bytes,4,rep,name=ListMsgElem,proto3" json:"ListMsgElem,omitempty"`
	ListEnum     []other.OtherEnumType `protobuf:"varint,5,rep,packed,name=ListEnum,proto3,enum=other.OtherEnumType" json:"ListEnum,omitempty"`
	ListEnum2    []EnumType            `protobuf:"varint,6,rep,packed,name=ListEnum2,proto3,enum=psm.EnumType" json:"ListEnum2,omitempty"`
}

func (x *ListValidate) Reset() {
	*x = ListValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValidate) ProtoMessage() {}

func (x *ListValidate) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValidate.ProtoReflect.Descriptor instead.
func (*ListValidate) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{6}
}

func (x *ListValidate) GetListMinSize() []string {
	if x != nil {
		return x.ListMinSize
	}
	return nil
}

func (x *ListValidate) GetListMaxSize() []string {
	if x != nil {
		return x.ListMaxSize
	}
	return nil
}

func (x *ListValidate) GetListBaseElem() []string {
	if x != nil {
		return x.ListBaseElem
	}
	return nil
}

func (x *ListValidate) GetListMsgElem() []*BytesValidate {
	if x != nil {
		return x.ListMsgElem
	}
	return nil
}

func (x *ListValidate) GetListEnum() []other.OtherEnumType {
	if x != nil {
		return x.ListEnum
	}
	return nil
}

func (x *ListValidate) GetListEnum2() []EnumType {
	if x != nil {
		return x.ListEnum2
	}
	return nil
}

type MapValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapISMinSize   map[int32]string              `protobuf:"bytes,1,rep,name=MapISMinSize,proto3" json:"MapISMinSize,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapNoSparse    map[int32]*BytesValidate      `protobuf:"bytes,2,rep,name=MapNoSparse,proto3" json:"MapNoSparse,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapISKeyValue  map[int32]string              `protobuf:"bytes,3,rep,name=MapISKeyValue,proto3" json:"MapISKeyValue,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnumType11     map[int32]other.OtherEnumType `protobuf:"bytes,4,rep,name=EnumType11,proto3" json:"EnumType11,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=other.OtherEnumType"`
	MapMsgKeyValue map[int32]*other.OtherMessage `protobuf:"bytes,5,rep,name=MapMsgKeyValue,proto3" json:"MapMsgKeyValue,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapValidate) Reset() {
	*x = MapValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapValidate) ProtoMessage() {}

func (x *MapValidate) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapValidate.ProtoReflect.Descriptor instead.
func (*MapValidate) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{7}
}

func (x *MapValidate) GetMapISMinSize() map[int32]string {
	if x != nil {
		return x.MapISMinSize
	}
	return nil
}

func (x *MapValidate) GetMapNoSparse() map[int32]*BytesValidate {
	if x != nil {
		return x.MapNoSparse
	}
	return nil
}

func (x *MapValidate) GetMapISKeyValue() map[int32]string {
	if x != nil {
		return x.MapISKeyValue
	}
	return nil
}

func (x *MapValidate) GetEnumType11() map[int32]other.OtherEnumType {
	if x != nil {
		return x.EnumType11
	}
	return nil
}

func (x *MapValidate) GetMapMsgKeyValue() map[int32]*other.OtherMessage {
	if x != nil {
		return x.MapMsgKeyValue
	}
	return nil
}

type FuncValidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Func1 *int64 `protobuf:"varint,1,opt,name=Func1,proto3,oneof" json:"Func1,omitempty"`
}

func (x *FuncValidate) Reset() {
	*x = FuncValidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncValidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncValidate) ProtoMessage() {}

func (x *FuncValidate) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncValidate.ProtoReflect.Descriptor instead.
func (*FuncValidate) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{8}
}

func (x *FuncValidate) GetFunc1() int64 {
	if x != nil && x.Func1 != nil {
		return *x.Func1
	}
	return 0
}

type Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg       *string `protobuf:"bytes,1,opt,name=Msg,proto3,oneof" json:"Msg,omitempty"`
	MaxLength *int64  `protobuf:"varint,2,opt,name=MaxLength,proto3,oneof" json:"MaxLength,omitempty"`
}

func (x *Example) Reset() {
	*x = Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_psm_psm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Example) ProtoMessage() {}

func (x *Example) ProtoReflect() protoreflect.Message {
	mi := &file_psm_psm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Example.ProtoReflect.Descriptor instead.
func (*Example) Descriptor() ([]byte, []int) {
	return file_psm_psm_proto_rawDescGZIP(), []int{9}
}

func (x *Example) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

func (x *Example) GetMaxLength() int64 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return 0
}

var File_psm_psm_proto protoreflect.FileDescriptor

var file_psm_psm_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x73, 0x6d, 0x2f, 0x70, 0x73, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x70, 0x73, 0x6d, 0x1a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6,
	0x03, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x1c, 0xf2, 0xbb, 0x18, 0x05, 0x0a, 0x03, 0x31, 0x32, 0x33, 0xf2, 0xbb, 0x18,
	0x05, 0x12, 0x03, 0x31, 0x33, 0x32, 0xf2, 0xbb, 0x18, 0x06, 0x1a, 0x04, 0x31, 0x32, 0x33, 0x32,
	0x52, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06,
	0x53, 0x49, 0x6e, 0x74, 0x4c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x42, 0x09, 0xf2, 0xbb,
	0x18, 0x05, 0x12, 0x03, 0x31, 0x32, 0x33, 0x52, 0x06, 0x53, 0x49, 0x6e, 0x74, 0x4c, 0x74, 0x12,
	0x27, 0x0a, 0x09, 0x53, 0x46, 0x69, 0x78, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0f, 0x42, 0x09, 0xf2, 0xbb, 0x18, 0x05, 0x1a, 0x03, 0x31, 0x32, 0x33, 0x52, 0x09, 0x53,
	0x46, 0x69, 0x78, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74,
	0x47, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xf2, 0xbb, 0x18, 0x05, 0x22, 0x03,
	0x31, 0x32, 0x33, 0x52, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x47, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x14,
	0xf2, 0xbb, 0x18, 0x05, 0x2a, 0x03, 0x31, 0x32, 0x33, 0xf2, 0xbb, 0x18, 0x07, 0xba, 0x01, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x46, 0x69, 0x78, 0x33, 0x32, 0x49, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x07, 0x42, 0x13, 0xf2, 0xbb, 0x18, 0x0f, 0x32, 0x03, 0x31, 0x32, 0x33,
	0x32, 0x03, 0x34, 0x35, 0x36, 0x32, 0x03, 0x37, 0x38, 0x39, 0x48, 0x01, 0x52, 0x07, 0x46, 0x69,
	0x78, 0x33, 0x32, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0a, 0x46, 0x69, 0x78, 0x36,
	0x34, 0x4e, 0x6f, 0x74, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x42, 0x1f, 0xf2, 0xbb,
	0x18, 0x1b, 0x3a, 0x03, 0x31, 0x32, 0x33, 0x3a, 0x03, 0x34, 0x35, 0x36, 0x3a, 0x03, 0x37, 0x38,
	0x39, 0x3a, 0x0a, 0x24, 0x53, 0x46, 0x69, 0x78, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x48, 0x02, 0x52,
	0x0a, 0x46, 0x69, 0x78, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0f, 0x42, 0x0d, 0xf2, 0xbb, 0x18, 0x09, 0x1a, 0x07, 0x24, 0x53, 0x49, 0x6e, 0x74, 0x4c, 0x74,
	0x48, 0x03, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x46, 0x69, 0x78, 0x33, 0x32, 0x49, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46,
	0x69, 0x78, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xb7, 0x04, 0x0a, 0x0e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x0d, 0xf2, 0xbb, 0x18, 0x09, 0x0a, 0x07, 0x31, 0x32, 0x33, 0x2e, 0x31, 0x32, 0x33, 0x48, 0x00,
	0x52, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x0d, 0xf2, 0xbb, 0x18, 0x09, 0x12, 0x07, 0x31, 0x32, 0x33, 0x2e, 0x33, 0x31, 0x32,
	0x48, 0x01, 0x52, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x08, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x0c, 0xf2, 0xbb, 0x18, 0x08, 0x1a, 0x06, 0x31, 0x32, 0x33, 0x2e, 0x35, 0x34, 0x48, 0x02,
	0x52, 0x08, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x08, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x0c, 0xf2, 0xbb, 0x18, 0x08, 0x22, 0x06, 0x31, 0x32, 0x33, 0x2e, 0x37, 0x36, 0x48, 0x03, 0x52,
	0x08, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x08,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0c,
	0xf2, 0xbb, 0x18, 0x08, 0x2a, 0x06, 0x31, 0x32, 0x33, 0x2e, 0x33, 0x32, 0x48, 0x04, 0x52, 0x08,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x08, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1d, 0xf2,
	0xbb, 0x18, 0x19, 0x32, 0x05, 0x31, 0x32, 0x33, 0x2e, 0x39, 0x32, 0x07, 0x34, 0x35, 0x36, 0x2e,
	0x34, 0x34, 0x33, 0x32, 0x07, 0x37, 0x38, 0x39, 0x2e, 0x32, 0x33, 0x32, 0x48, 0x05, 0x52, 0x08,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0b, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x2b, 0xf2, 0xbb, 0x18, 0x27, 0x3a, 0x07, 0x31, 0x32, 0x33, 0x2e, 0x32, 0x33, 0x34, 0x3a,
	0x08, 0x34, 0x35, 0x36, 0x2e, 0x37, 0x36, 0x35, 0x34, 0x3a, 0x07, 0x37, 0x38, 0x39, 0x2e, 0x32,
	0x33, 0x32, 0x3a, 0x09, 0x24, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x48, 0x06, 0x52,
	0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x0f, 0xf2, 0xbb, 0x18, 0x0b, 0x1a, 0x09, 0x24, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x4c, 0x65, 0x48, 0x07, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0xf2, 0xbb, 0x18, 0x06, 0x0a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xf2, 0xbb, 0x18, 0x0c, 0x0a, 0x0a, 0x24, 0x42, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x48, 0x01, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x42, 0x6f, 0x6f, 0x6c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0xe3, 0x05, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xf2, 0xbb, 0x18,
	0x05, 0x0a, 0x03, 0x61, 0x73, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xf2, 0xbb, 0x18, 0x04, 0x4a, 0x02, 0x31, 0x32, 0x48, 0x01, 0x52, 0x0d, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xf2, 0xbb, 0x18, 0x04, 0x52, 0x02, 0x31, 0x32, 0x48, 0x02,
	0x52, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xf2, 0xbb, 0x18, 0x0e, 0x5a,
	0x0c, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x48, 0x03, 0x52,
	0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xf2, 0xbb, 0x18, 0x05, 0x62, 0x03, 0x61,
	0x73, 0x64, 0x48, 0x04, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xf2, 0xbb, 0x18,
	0x05, 0x6a, 0x03, 0x61, 0x73, 0x64, 0x48, 0x05, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xf2, 0xbb, 0x18, 0x05, 0x72, 0x03, 0x61, 0x73, 0x64, 0x48, 0x06, 0x52, 0x0d, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xf2, 0xbb, 0x18, 0x05, 0x7a,
	0x03, 0x61, 0x73, 0x64, 0x48, 0x07, 0x52, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xf2,
	0xbb, 0x18, 0x0f, 0x32, 0x03, 0x31, 0x32, 0x33, 0x32, 0x03, 0x34, 0x35, 0x36, 0x32, 0x03, 0x37,
	0x38, 0x39, 0x48, 0x08, 0x52, 0x08, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x49, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xf2, 0xbb, 0x18, 0x0f, 0x3a, 0x03, 0x31, 0x32,
	0x33, 0x3a, 0x03, 0x34, 0x35, 0x36, 0x3a, 0x03, 0x37, 0x38, 0x39, 0x48, 0x09, 0x52, 0x0b, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x22, 0xc4, 0x05, 0x0a, 0x0d, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x09, 0xf2, 0xbb, 0x18, 0x05, 0x0a, 0x03, 0x61, 0x73, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0c, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x08, 0xf2, 0xbb, 0x18, 0x04, 0x4a, 0x02, 0x31, 0x32, 0x48, 0x01, 0x52, 0x0c, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x08, 0xf2, 0xbb, 0x18, 0x04, 0x52, 0x02, 0x31, 0x32, 0x48, 0x02,
	0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x12, 0xf2, 0xbb, 0x18, 0x0e, 0x5a, 0x0c, 0x5b,
	0x30, 0x2d, 0x39, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x48, 0x03, 0x52, 0x0c, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x09, 0xf2, 0xbb, 0x18, 0x05, 0x62, 0x03, 0x61, 0x73, 0x64, 0x48, 0x04,
	0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xf2, 0xbb, 0x18, 0x05, 0x6a, 0x03, 0x61, 0x73, 0x64,
	0x48, 0x05, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xf2, 0xbb, 0x18, 0x05, 0x72, 0x03,
	0x61, 0x73, 0x64, 0x48, 0x06, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4e,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x09, 0xf2, 0xbb, 0x18, 0x05, 0x7a, 0x03, 0x61, 0x73, 0x64, 0x48, 0x07, 0x52, 0x0f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x13, 0xf2, 0xbb, 0x18, 0x0f, 0x32, 0x03, 0x31, 0x32, 0x33, 0x32, 0x03, 0x34, 0x35,
	0x36, 0x32, 0x03, 0x37, 0x38, 0x39, 0x48, 0x08, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x13, 0xf2, 0xbb, 0x18, 0x0f, 0x3a, 0x03,
	0x31, 0x32, 0x33, 0x3a, 0x03, 0x34, 0x35, 0x36, 0x3a, 0x03, 0x37, 0x38, 0x39, 0x48, 0x09, 0x52,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x49,
	0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e,
	0x22, 0xdd, 0x02, 0x0a, 0x0c, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3e, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x70, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x14, 0xf2, 0xbb, 0x18, 0x10, 0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x54, 0x57, 0x45, 0x45, 0x54, 0x48, 0x00, 0x52, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x70, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x42, 0x16, 0xf2, 0xbb, 0x18, 0x12, 0x0a, 0x10, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x2e, 0x54, 0x57, 0x45, 0x45, 0x54, 0x32, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x75, 0x6d,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1f, 0xf2, 0xbb, 0x18, 0x1b, 0x0a,
	0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x57, 0x45, 0x45, 0x54, 0x48, 0x02, 0x52, 0x05, 0x45, 0x6e,
	0x75, 0x6d, 0x33, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x70, 0x73, 0x6d, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xf2,
	0xbb, 0x18, 0x07, 0x82, 0x01, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x03, 0x52, 0x0e, 0x45, 0x6e,
	0x75, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e,
	0x75, 0x6d, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4f, 0x6e, 0x6c, 0x79,
	0x22, 0xfb, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xf2, 0xbb, 0x18, 0x04, 0x4a, 0x02, 0x31, 0x32,
	0x52, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x08, 0xf2, 0xbb, 0x18, 0x04, 0x52, 0x02, 0x31, 0x31, 0x52, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0c, 0xf2, 0xbb, 0x18, 0x08, 0xa2, 0x01, 0x05, 0x0a, 0x03, 0x33, 0x31, 0x32, 0x52, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x73, 0x6d, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x0f, 0xf2, 0xbb, 0x18, 0x0b, 0xa2, 0x01, 0x08, 0xaa, 0x01, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x54, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x22, 0xf2, 0xbb, 0x18, 0x1e,
	0xa2, 0x01, 0x1b, 0x0a, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x57, 0x45, 0x45, 0x54, 0x52, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x73,
	0x6d, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x17, 0xf2, 0xbb, 0x18, 0x13,
	0xa2, 0x01, 0x10, 0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x57,
	0x45, 0x45, 0x54, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x22, 0xfe,
	0x06, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x58,
	0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x49, 0x53, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x73, 0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x53, 0x4d, 0x69, 0x6e, 0x53,
	0x69, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0xf2, 0xbb, 0x18, 0x04, 0x4a, 0x02,
	0x31, 0x30, 0xf2, 0xbb, 0x18, 0x04, 0x52, 0x02, 0x33, 0x30, 0x52, 0x0c, 0x4d, 0x61, 0x70, 0x49,
	0x53, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4e,
	0x6f, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x73, 0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x0b, 0xf2, 0xbb, 0x18, 0x07, 0x8a, 0x01, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x4d,
	0x61, 0x70, 0x4e, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x0d, 0x4d, 0x61,
	0x70, 0x49, 0x53, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x73, 0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x53, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2f, 0xf2, 0xbb, 0x18, 0x08, 0x92, 0x01, 0x05, 0x0a,
	0x03, 0x31, 0x32, 0x33, 0xf2, 0xbb, 0x18, 0x07, 0x92, 0x01, 0x04, 0x22, 0x02, 0x31, 0x32, 0xf2,
	0xbb, 0x18, 0x08, 0x9a, 0x01, 0x05, 0x0a, 0x03, 0x61, 0x73, 0x64, 0xf2, 0xbb, 0x18, 0x08, 0x9a,
	0x01, 0x05, 0x62, 0x03, 0x61, 0x73, 0x64, 0x52, 0x0d, 0x4d, 0x61, 0x70, 0x49, 0x53, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x31, 0x31, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x73, 0x6d,
	0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0xf2, 0xbb,
	0x18, 0x1e, 0x9a, 0x01, 0x1b, 0x0a, 0x19, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x57, 0x45, 0x45, 0x54,
	0x52, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x31, 0x12, 0x5d, 0x0a, 0x0e,
	0x4d, 0x61, 0x70, 0x4d, 0x73, 0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x73, 0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x73, 0x67, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0f, 0xf2, 0xbb, 0x18, 0x0b,
	0x9a, 0x01, 0x08, 0xaa, 0x01, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x4d, 0x61, 0x70,
	0x4d, 0x73, 0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x4d,
	0x61, 0x70, 0x49, 0x53, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x10,
	0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x73, 0x6d, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x53, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0f, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x31, 0x31,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x4d, 0x73,
	0x67, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x61, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x46, 0x75, 0x6e, 0x63, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2c,
	0xf2, 0xbb, 0x18, 0x28, 0x22, 0x26, 0x40, 0x61, 0x64, 0x64, 0x28, 0x40, 0x61, 0x64, 0x64, 0x28,
	0x40, 0x6e, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x28, 0x29,
	0x2c, 0x31, 0x32, 0x32, 0x29, 0x2c, 0x20, 0x31, 0x30, 0x30, 0x30, 0x29, 0x48, 0x00, 0x52, 0x05,
	0x46, 0x75, 0x6e, 0x63, 0x31, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x46, 0x75, 0x6e,
	0x63, 0x31, 0x22, 0x78, 0x0a, 0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x34, 0x0a,
	0x03, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xf2, 0xbb, 0x18, 0x19,
	0x52, 0x17, 0x40, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x24, 0x4d,
	0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x29, 0x48, 0x00, 0x52, 0x03, 0x4d, 0x73, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4d, 0x73, 0x67, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2a, 0x22, 0x0a, 0x08,
	0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x57, 0x45, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54, 0x57, 0x45, 0x45, 0x54, 0x10, 0x01,
	0x32, 0x3c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x31, 0x12, 0x10, 0x2e, 0x70, 0x73, 0x6d, 0x2e, 0x49,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x73, 0x6d,
	0x2e, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x42, 0x15,
	0x5a, 0x13, 0x61, 0x2f, 0x62, 0x2f, 0x63, 0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65,
	0x6e, 0x2f, 0x70, 0x73, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_psm_psm_proto_rawDescOnce sync.Once
	file_psm_psm_proto_rawDescData = file_psm_psm_proto_rawDesc
)

func file_psm_psm_proto_rawDescGZIP() []byte {
	file_psm_psm_proto_rawDescOnce.Do(func() {
		file_psm_psm_proto_rawDescData = protoimpl.X.CompressGZIP(file_psm_psm_proto_rawDescData)
	})
	return file_psm_psm_proto_rawDescData
}

var file_psm_psm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_psm_psm_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_psm_psm_proto_goTypes = []interface{}{
	(EnumType)(0),              // 0: psm.EnumType
	(*IntValidate)(nil),        // 1: psm.IntValidate
	(*DoubleValidate)(nil),     // 2: psm.DoubleValidate
	(*BoolValidator)(nil),      // 3: psm.BoolValidator
	(*StringValidate)(nil),     // 4: psm.StringValidate
	(*BytesValidate)(nil),      // 5: psm.BytesValidate
	(*EnumValidate)(nil),       // 6: psm.EnumValidate
	(*ListValidate)(nil),       // 7: psm.ListValidate
	(*MapValidate)(nil),        // 8: psm.MapValidate
	(*FuncValidate)(nil),       // 9: psm.FuncValidate
	(*Example)(nil),            // 10: psm.Example
	nil,                        // 11: psm.MapValidate.MapISMinSizeEntry
	nil,                        // 12: psm.MapValidate.MapNoSparseEntry
	nil,                        // 13: psm.MapValidate.MapISKeyValueEntry
	nil,                        // 14: psm.MapValidate.EnumType11Entry
	nil,                        // 15: psm.MapValidate.MapMsgKeyValueEntry
	(EnumType2)(0),             // 16: psm.EnumType2
	(other.OtherEnumType)(0),   // 17: other.OtherEnumType
	(*other.OtherMessage)(nil), // 18: other.OtherMessage
}
var file_psm_psm_proto_depIdxs = []int32{
	0,  // 0: psm.EnumValidate.Enum1:type_name -> psm.EnumType
	16, // 1: psm.EnumValidate.Enum2:type_name -> psm.EnumType2
	17, // 2: psm.EnumValidate.Enum3:type_name -> other.OtherEnumType
	0,  // 3: psm.EnumValidate.EnumDefineOnly:type_name -> psm.EnumType
	5,  // 4: psm.ListValidate.ListMsgElem:type_name -> psm.BytesValidate
	17, // 5: psm.ListValidate.ListEnum:type_name -> other.OtherEnumType
	0,  // 6: psm.ListValidate.ListEnum2:type_name -> psm.EnumType
	11, // 7: psm.MapValidate.MapISMinSize:type_name -> psm.MapValidate.MapISMinSizeEntry
	12, // 8: psm.MapValidate.MapNoSparse:type_name -> psm.MapValidate.MapNoSparseEntry
	13, // 9: psm.MapValidate.MapISKeyValue:type_name -> psm.MapValidate.MapISKeyValueEntry
	14, // 10: psm.MapValidate.EnumType11:type_name -> psm.MapValidate.EnumType11Entry
	15, // 11: psm.MapValidate.MapMsgKeyValue:type_name -> psm.MapValidate.MapMsgKeyValueEntry
	5,  // 12: psm.MapValidate.MapNoSparseEntry.value:type_name -> psm.BytesValidate
	17, // 13: psm.MapValidate.EnumType11Entry.value:type_name -> other.OtherEnumType
	18, // 14: psm.MapValidate.MapMsgKeyValueEntry.value:type_name -> other.OtherMessage
	1,  // 15: psm.Validator.Method1:input_type -> psm.IntValidate
	1,  // 16: psm.Validator.Method1:output_type -> psm.IntValidate
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_psm_psm_proto_init() }
func file_psm_psm_proto_init() {
	if File_psm_psm_proto != nil {
		return
	}
	file_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_psm_psm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psm_psm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psm_psm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psm_psm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psm_psm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psm_psm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psm_psm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psm_psm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psm_psm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncValidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_psm_psm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_psm_psm_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_psm_psm_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_psm_psm_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_psm_psm_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_psm_psm_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_psm_psm_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_psm_psm_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_psm_psm_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_psm_psm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_psm_psm_proto_goTypes,
		DependencyIndexes: file_psm_psm_proto_depIdxs,
		EnumInfos:         file_psm_psm_proto_enumTypes,
		MessageInfos:      file_psm_psm_proto_msgTypes,
	}.Build()
	File_psm_psm_proto = out.File
	file_psm_psm_proto_rawDesc = nil
	file_psm_psm_proto_goTypes = nil
	file_psm_psm_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.5.2. DO NOT EDIT.

type Validator interface {
	Method1(ctx context.Context, req *IntValidate) (res *IntValidate, err error)
}
