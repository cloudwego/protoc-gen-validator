// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package psm

import (
	api "a/b/c/kitex_gen/api"
	other "a/b/c/kitex_gen/other"
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *IntValidate) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IntValidate[number], err)
}

func (x *IntValidate) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Int32Const, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *IntValidate) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SIntLt, offset, err = fastpb.ReadSint32(buf, _type)
	return offset, err
}

func (x *IntValidate) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SFix32Lte, offset, err = fastpb.ReadSfixed32(buf, _type)
	return offset, err
}

func (x *IntValidate) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.UIntGt, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *IntValidate) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadUint64(buf, _type)
	x.Uint64Gte = &tmp
	return offset, err
}

func (x *IntValidate) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadFixed32(buf, _type)
	x.Fix32In = &tmp
	return offset, err
}

func (x *IntValidate) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadFixed64(buf, _type)
	x.Fix64Notin = &tmp
	return offset, err
}

func (x *IntValidate) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadSfixed32(buf, _type)
	x.Reference = &tmp
	return offset, err
}

func (x *DoubleValidate) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DoubleValidate[number], err)
}

func (x *DoubleValidate) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadDouble(buf, _type)
	x.DoubleConst = &tmp
	return offset, err
}

func (x *DoubleValidate) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadFloat(buf, _type)
	x.FloatLt = &tmp
	return offset, err
}

func (x *DoubleValidate) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadDouble(buf, _type)
	x.DoubleLe = &tmp
	return offset, err
}

func (x *DoubleValidate) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadDouble(buf, _type)
	x.DoubleGt = &tmp
	return offset, err
}

func (x *DoubleValidate) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadDouble(buf, _type)
	x.DoubleGe = &tmp
	return offset, err
}

func (x *DoubleValidate) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadDouble(buf, _type)
	x.DoubleIn = &tmp
	return offset, err
}

func (x *DoubleValidate) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadDouble(buf, _type)
	x.DoubleNotin = &tmp
	return offset, err
}

func (x *DoubleValidate) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadDouble(buf, _type)
	x.Reference = &tmp
	return offset, err
}

func (x *BoolValidator) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BoolValidator[number], err)
}

func (x *BoolValidator) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.BoolConst = &tmp
	return offset, err
}

func (x *BoolValidator) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadBool(buf, _type)
	x.Reference = &tmp
	return offset, err
}

func (x *StringValidate) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_StringValidate[number], err)
}

func (x *StringValidate) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringConst = &tmp
	return offset, err
}

func (x *StringValidate) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringMinSize = &tmp
	return offset, err
}

func (x *StringValidate) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringMaxSize = &tmp
	return offset, err
}

func (x *StringValidate) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringPattern = &tmp
	return offset, err
}

func (x *StringValidate) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringPrefix = &tmp
	return offset, err
}

func (x *StringValidate) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringSuffix = &tmp
	return offset, err
}

func (x *StringValidate) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringContain = &tmp
	return offset, err
}

func (x *StringValidate) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringNotContain = &tmp
	return offset, err
}

func (x *StringValidate) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringIn = &tmp
	return offset, err
}

func (x *StringValidate) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StringNotIn = &tmp
	return offset, err
}

func (x *BytesValidate) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BytesValidate[number], err)
}

func (x *BytesValidate) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BytesConst, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BytesValidate) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.BytesMinSize, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BytesValidate) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.BytesMaxSize, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BytesValidate) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BytesPattern, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BytesValidate) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.BytesPrefix, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BytesValidate) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.BytesSuffix, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BytesValidate) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.BytesContain, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BytesValidate) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.BytesNotContain, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BytesValidate) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.BytesIn, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *BytesValidate) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.BytesNotIn, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *EnumValidate) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EnumValidate[number], err)
}

func (x *EnumValidate) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Enum1 = EnumType(v).Enum()
	return offset, nil
}

func (x *EnumValidate) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Enum2 = EnumType2(v).Enum()
	return offset, nil
}

func (x *EnumValidate) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Enum3 = other.OtherEnumType(v).Enum()
	return offset, nil
}

func (x *EnumValidate) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.EnumDefineOnly = EnumType(v).Enum()
	return offset, nil
}

func (x *ListValidate) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListValidate[number], err)
}

func (x *ListValidate) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ListMinSize = append(x.ListMinSize, v)
	return offset, err
}

func (x *ListValidate) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ListMaxSize = append(x.ListMaxSize, v)
	return offset, err
}

func (x *ListValidate) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ListBaseElem = append(x.ListBaseElem, v)
	return offset, err
}

func (x *ListValidate) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v BytesValidate
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ListMsgElem = append(x.ListMsgElem, &v)
	return offset, nil
}

func (x *ListValidate) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListEnum = append(x.ListEnum, other.OtherEnumType(v))
			return offset, nil
		})
	return offset, err
}

func (x *ListValidate) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.ListEnum2 = append(x.ListEnum2, EnumType(v))
			return offset, nil
		})
	return offset, err
}

func (x *MapValidate) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MapValidate[number], err)
}

func (x *MapValidate) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	if x.MapISMinSize == nil {
		x.MapISMinSize = make(map[int32]string)
	}
	var key int32
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapISMinSize[key] = value
	return offset, nil
}

func (x *MapValidate) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.MapNoSparse == nil {
		x.MapNoSparse = make(map[int32]*BytesValidate)
	}
	var key int32
	var value *BytesValidate
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v BytesValidate
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.MapNoSparse[key] = value
	return offset, nil
}

func (x *MapValidate) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	if x.MapISKeyValue == nil {
		x.MapISKeyValue = make(map[int32]string)
	}
	var key int32
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.MapISKeyValue[key] = value
	return offset, nil
}

func (x *MapValidate) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	if x.EnumType11 == nil {
		x.EnumType11 = make(map[int32]other.OtherEnumType)
	}
	var key int32
	var value other.OtherEnumType
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			value = other.OtherEnumType(v)
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.EnumType11[key] = value
	return offset, nil
}

func (x *MapValidate) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	if x.MapMsgKeyValue == nil {
		x.MapMsgKeyValue = make(map[int32]*other.OtherMessage)
	}
	var key int32
	var value *other.OtherMessage
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt32(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v other.OtherMessage
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.MapMsgKeyValue[key] = value
	return offset, nil
}

func (x *FuncValidate) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FuncValidate[number], err)
}

func (x *FuncValidate) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Func1 = &tmp
	return offset, err
}

func (x *Example) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Example[number], err)
}

func (x *Example) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Msg = &tmp
	return offset, err
}

func (x *Example) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.MaxLength = &tmp
	return offset, err
}

func (x *IntValidate) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *IntValidate) fastWriteField1(buf []byte) (offset int) {
	if x.Int32Const == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetInt32Const())
	return offset
}

func (x *IntValidate) fastWriteField2(buf []byte) (offset int) {
	if x.SIntLt == 0 {
		return offset
	}
	offset += fastpb.WriteSint32(buf[offset:], 2, x.GetSIntLt())
	return offset
}

func (x *IntValidate) fastWriteField3(buf []byte) (offset int) {
	if x.SFix32Lte == 0 {
		return offset
	}
	offset += fastpb.WriteSfixed32(buf[offset:], 3, x.GetSFix32Lte())
	return offset
}

func (x *IntValidate) fastWriteField4(buf []byte) (offset int) {
	if x.UIntGt == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 4, x.GetUIntGt())
	return offset
}

func (x *IntValidate) fastWriteField5(buf []byte) (offset int) {
	if x.Uint64Gte == nil {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 5, x.GetUint64Gte())
	return offset
}

func (x *IntValidate) fastWriteField6(buf []byte) (offset int) {
	if x.Fix32In == nil {
		return offset
	}
	offset += fastpb.WriteFixed32(buf[offset:], 6, x.GetFix32In())
	return offset
}

func (x *IntValidate) fastWriteField7(buf []byte) (offset int) {
	if x.Fix64Notin == nil {
		return offset
	}
	offset += fastpb.WriteFixed64(buf[offset:], 7, x.GetFix64Notin())
	return offset
}

func (x *IntValidate) fastWriteField8(buf []byte) (offset int) {
	if x.Reference == nil {
		return offset
	}
	offset += fastpb.WriteSfixed32(buf[offset:], 8, x.GetReference())
	return offset
}

func (x *DoubleValidate) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *DoubleValidate) fastWriteField1(buf []byte) (offset int) {
	if x.DoubleConst == nil {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 1, x.GetDoubleConst())
	return offset
}

func (x *DoubleValidate) fastWriteField2(buf []byte) (offset int) {
	if x.FloatLt == nil {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 2, x.GetFloatLt())
	return offset
}

func (x *DoubleValidate) fastWriteField3(buf []byte) (offset int) {
	if x.DoubleLe == nil {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.GetDoubleLe())
	return offset
}

func (x *DoubleValidate) fastWriteField4(buf []byte) (offset int) {
	if x.DoubleGt == nil {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 4, x.GetDoubleGt())
	return offset
}

func (x *DoubleValidate) fastWriteField5(buf []byte) (offset int) {
	if x.DoubleGe == nil {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 5, x.GetDoubleGe())
	return offset
}

func (x *DoubleValidate) fastWriteField6(buf []byte) (offset int) {
	if x.DoubleIn == nil {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 6, x.GetDoubleIn())
	return offset
}

func (x *DoubleValidate) fastWriteField7(buf []byte) (offset int) {
	if x.DoubleNotin == nil {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 7, x.GetDoubleNotin())
	return offset
}

func (x *DoubleValidate) fastWriteField8(buf []byte) (offset int) {
	if x.Reference == nil {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 8, x.GetReference())
	return offset
}

func (x *BoolValidator) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BoolValidator) fastWriteField1(buf []byte) (offset int) {
	if x.BoolConst == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetBoolConst())
	return offset
}

func (x *BoolValidator) fastWriteField2(buf []byte) (offset int) {
	if x.Reference == nil {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetReference())
	return offset
}

func (x *StringValidate) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *StringValidate) fastWriteField1(buf []byte) (offset int) {
	if x.StringConst == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetStringConst())
	return offset
}

func (x *StringValidate) fastWriteField2(buf []byte) (offset int) {
	if x.StringMinSize == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStringMinSize())
	return offset
}

func (x *StringValidate) fastWriteField3(buf []byte) (offset int) {
	if x.StringMaxSize == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetStringMaxSize())
	return offset
}

func (x *StringValidate) fastWriteField4(buf []byte) (offset int) {
	if x.StringPattern == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetStringPattern())
	return offset
}

func (x *StringValidate) fastWriteField5(buf []byte) (offset int) {
	if x.StringPrefix == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetStringPrefix())
	return offset
}

func (x *StringValidate) fastWriteField6(buf []byte) (offset int) {
	if x.StringSuffix == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetStringSuffix())
	return offset
}

func (x *StringValidate) fastWriteField7(buf []byte) (offset int) {
	if x.StringContain == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetStringContain())
	return offset
}

func (x *StringValidate) fastWriteField8(buf []byte) (offset int) {
	if x.StringNotContain == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetStringNotContain())
	return offset
}

func (x *StringValidate) fastWriteField9(buf []byte) (offset int) {
	if x.StringIn == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetStringIn())
	return offset
}

func (x *StringValidate) fastWriteField10(buf []byte) (offset int) {
	if x.StringNotIn == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetStringNotIn())
	return offset
}

func (x *BytesValidate) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *BytesValidate) fastWriteField1(buf []byte) (offset int) {
	if x.BytesConst == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 1, x.GetBytesConst())
	return offset
}

func (x *BytesValidate) fastWriteField2(buf []byte) (offset int) {
	if x.BytesMinSize == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetBytesMinSize())
	return offset
}

func (x *BytesValidate) fastWriteField3(buf []byte) (offset int) {
	if x.BytesMaxSize == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 3, x.GetBytesMaxSize())
	return offset
}

func (x *BytesValidate) fastWriteField4(buf []byte) (offset int) {
	if x.BytesPattern == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 4, x.GetBytesPattern())
	return offset
}

func (x *BytesValidate) fastWriteField5(buf []byte) (offset int) {
	if x.BytesPrefix == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 5, x.GetBytesPrefix())
	return offset
}

func (x *BytesValidate) fastWriteField6(buf []byte) (offset int) {
	if x.BytesSuffix == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 6, x.GetBytesSuffix())
	return offset
}

func (x *BytesValidate) fastWriteField7(buf []byte) (offset int) {
	if x.BytesContain == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 7, x.GetBytesContain())
	return offset
}

func (x *BytesValidate) fastWriteField8(buf []byte) (offset int) {
	if x.BytesNotContain == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 8, x.GetBytesNotContain())
	return offset
}

func (x *BytesValidate) fastWriteField9(buf []byte) (offset int) {
	if x.BytesIn == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 9, x.GetBytesIn())
	return offset
}

func (x *BytesValidate) fastWriteField10(buf []byte) (offset int) {
	if x.BytesNotIn == nil {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 10, x.GetBytesNotIn())
	return offset
}

func (x *EnumValidate) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *EnumValidate) fastWriteField1(buf []byte) (offset int) {
	if x.Enum1 == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetEnum1()))
	return offset
}

func (x *EnumValidate) fastWriteField2(buf []byte) (offset int) {
	if x.Enum2 == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetEnum2()))
	return offset
}

func (x *EnumValidate) fastWriteField3(buf []byte) (offset int) {
	if x.Enum3 == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetEnum3()))
	return offset
}

func (x *EnumValidate) fastWriteField4(buf []byte) (offset int) {
	if x.EnumDefineOnly == nil {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetEnumDefineOnly()))
	return offset
}

func (x *ListValidate) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ListValidate) fastWriteField1(buf []byte) (offset int) {
	if len(x.ListMinSize) == 0 {
		return offset
	}
	for i := range x.GetListMinSize() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetListMinSize()[i])
	}
	return offset
}

func (x *ListValidate) fastWriteField2(buf []byte) (offset int) {
	if len(x.ListMaxSize) == 0 {
		return offset
	}
	for i := range x.GetListMaxSize() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetListMaxSize()[i])
	}
	return offset
}

func (x *ListValidate) fastWriteField3(buf []byte) (offset int) {
	if len(x.ListBaseElem) == 0 {
		return offset
	}
	for i := range x.GetListBaseElem() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetListBaseElem()[i])
	}
	return offset
}

func (x *ListValidate) fastWriteField4(buf []byte) (offset int) {
	if x.ListMsgElem == nil {
		return offset
	}
	for i := range x.GetListMsgElem() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetListMsgElem()[i])
	}
	return offset
}

func (x *ListValidate) fastWriteField5(buf []byte) (offset int) {
	if len(x.ListEnum) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 5, len(x.GetListEnum()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, int32(x.GetListEnum()[numIdxOrVal]))
			return offset
		})
	return offset
}

func (x *ListValidate) fastWriteField6(buf []byte) (offset int) {
	if len(x.ListEnum2) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 6, len(x.GetListEnum2()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, int32(x.GetListEnum2()[numIdxOrVal]))
			return offset
		})
	return offset
}

func (x *MapValidate) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *MapValidate) fastWriteField1(buf []byte) (offset int) {
	if x.MapISMinSize == nil {
		return offset
	}
	for k, v := range x.GetMapISMinSize() {
		offset += fastpb.WriteMapEntry(buf[offset:], 1,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *MapValidate) fastWriteField2(buf []byte) (offset int) {
	if x.MapNoSparse == nil {
		return offset
	}
	for k, v := range x.GetMapNoSparse() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *MapValidate) fastWriteField3(buf []byte) (offset int) {
	if x.MapISKeyValue == nil {
		return offset
	}
	for k, v := range x.GetMapISKeyValue() {
		offset += fastpb.WriteMapEntry(buf[offset:], 3,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *MapValidate) fastWriteField4(buf []byte) (offset int) {
	if x.EnumType11 == nil {
		return offset
	}
	for k, v := range x.GetEnumType11() {
		offset += fastpb.WriteMapEntry(buf[offset:], 4,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteInt32(buf[offset:], numIdxOrVal, int32(v))
				return offset
			})
	}
	return offset
}

func (x *MapValidate) fastWriteField5(buf []byte) (offset int) {
	if x.MapMsgKeyValue == nil {
		return offset
	}
	for k, v := range x.GetMapMsgKeyValue() {
		offset += fastpb.WriteMapEntry(buf[offset:], 5,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *FuncValidate) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *FuncValidate) fastWriteField1(buf []byte) (offset int) {
	if x.Func1 == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetFunc1())
	return offset
}

func (x *Example) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Example) fastWriteField1(buf []byte) (offset int) {
	if x.Msg == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMsg())
	return offset
}

func (x *Example) fastWriteField2(buf []byte) (offset int) {
	if x.MaxLength == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetMaxLength())
	return offset
}

func (x *IntValidate) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *IntValidate) sizeField1() (n int) {
	if x.Int32Const == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetInt32Const())
	return n
}

func (x *IntValidate) sizeField2() (n int) {
	if x.SIntLt == 0 {
		return n
	}
	n += fastpb.SizeSint32(2, x.GetSIntLt())
	return n
}

func (x *IntValidate) sizeField3() (n int) {
	if x.SFix32Lte == 0 {
		return n
	}
	n += fastpb.SizeSfixed32(3, x.GetSFix32Lte())
	return n
}

func (x *IntValidate) sizeField4() (n int) {
	if x.UIntGt == 0 {
		return n
	}
	n += fastpb.SizeUint32(4, x.GetUIntGt())
	return n
}

func (x *IntValidate) sizeField5() (n int) {
	if x.Uint64Gte == nil {
		return n
	}
	n += fastpb.SizeUint64(5, x.GetUint64Gte())
	return n
}

func (x *IntValidate) sizeField6() (n int) {
	if x.Fix32In == nil {
		return n
	}
	n += fastpb.SizeFixed32(6, x.GetFix32In())
	return n
}

func (x *IntValidate) sizeField7() (n int) {
	if x.Fix64Notin == nil {
		return n
	}
	n += fastpb.SizeFixed64(7, x.GetFix64Notin())
	return n
}

func (x *IntValidate) sizeField8() (n int) {
	if x.Reference == nil {
		return n
	}
	n += fastpb.SizeSfixed32(8, x.GetReference())
	return n
}

func (x *DoubleValidate) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *DoubleValidate) sizeField1() (n int) {
	if x.DoubleConst == nil {
		return n
	}
	n += fastpb.SizeDouble(1, x.GetDoubleConst())
	return n
}

func (x *DoubleValidate) sizeField2() (n int) {
	if x.FloatLt == nil {
		return n
	}
	n += fastpb.SizeFloat(2, x.GetFloatLt())
	return n
}

func (x *DoubleValidate) sizeField3() (n int) {
	if x.DoubleLe == nil {
		return n
	}
	n += fastpb.SizeDouble(3, x.GetDoubleLe())
	return n
}

func (x *DoubleValidate) sizeField4() (n int) {
	if x.DoubleGt == nil {
		return n
	}
	n += fastpb.SizeDouble(4, x.GetDoubleGt())
	return n
}

func (x *DoubleValidate) sizeField5() (n int) {
	if x.DoubleGe == nil {
		return n
	}
	n += fastpb.SizeDouble(5, x.GetDoubleGe())
	return n
}

func (x *DoubleValidate) sizeField6() (n int) {
	if x.DoubleIn == nil {
		return n
	}
	n += fastpb.SizeDouble(6, x.GetDoubleIn())
	return n
}

func (x *DoubleValidate) sizeField7() (n int) {
	if x.DoubleNotin == nil {
		return n
	}
	n += fastpb.SizeDouble(7, x.GetDoubleNotin())
	return n
}

func (x *DoubleValidate) sizeField8() (n int) {
	if x.Reference == nil {
		return n
	}
	n += fastpb.SizeDouble(8, x.GetReference())
	return n
}

func (x *BoolValidator) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BoolValidator) sizeField1() (n int) {
	if x.BoolConst == nil {
		return n
	}
	n += fastpb.SizeBool(1, x.GetBoolConst())
	return n
}

func (x *BoolValidator) sizeField2() (n int) {
	if x.Reference == nil {
		return n
	}
	n += fastpb.SizeBool(2, x.GetReference())
	return n
}

func (x *StringValidate) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *StringValidate) sizeField1() (n int) {
	if x.StringConst == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetStringConst())
	return n
}

func (x *StringValidate) sizeField2() (n int) {
	if x.StringMinSize == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetStringMinSize())
	return n
}

func (x *StringValidate) sizeField3() (n int) {
	if x.StringMaxSize == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetStringMaxSize())
	return n
}

func (x *StringValidate) sizeField4() (n int) {
	if x.StringPattern == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetStringPattern())
	return n
}

func (x *StringValidate) sizeField5() (n int) {
	if x.StringPrefix == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetStringPrefix())
	return n
}

func (x *StringValidate) sizeField6() (n int) {
	if x.StringSuffix == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetStringSuffix())
	return n
}

func (x *StringValidate) sizeField7() (n int) {
	if x.StringContain == nil {
		return n
	}
	n += fastpb.SizeString(7, x.GetStringContain())
	return n
}

func (x *StringValidate) sizeField8() (n int) {
	if x.StringNotContain == nil {
		return n
	}
	n += fastpb.SizeString(8, x.GetStringNotContain())
	return n
}

func (x *StringValidate) sizeField9() (n int) {
	if x.StringIn == nil {
		return n
	}
	n += fastpb.SizeString(9, x.GetStringIn())
	return n
}

func (x *StringValidate) sizeField10() (n int) {
	if x.StringNotIn == nil {
		return n
	}
	n += fastpb.SizeString(10, x.GetStringNotIn())
	return n
}

func (x *BytesValidate) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *BytesValidate) sizeField1() (n int) {
	if x.BytesConst == nil {
		return n
	}
	n += fastpb.SizeBytes(1, x.GetBytesConst())
	return n
}

func (x *BytesValidate) sizeField2() (n int) {
	if x.BytesMinSize == nil {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetBytesMinSize())
	return n
}

func (x *BytesValidate) sizeField3() (n int) {
	if x.BytesMaxSize == nil {
		return n
	}
	n += fastpb.SizeBytes(3, x.GetBytesMaxSize())
	return n
}

func (x *BytesValidate) sizeField4() (n int) {
	if x.BytesPattern == nil {
		return n
	}
	n += fastpb.SizeBytes(4, x.GetBytesPattern())
	return n
}

func (x *BytesValidate) sizeField5() (n int) {
	if x.BytesPrefix == nil {
		return n
	}
	n += fastpb.SizeBytes(5, x.GetBytesPrefix())
	return n
}

func (x *BytesValidate) sizeField6() (n int) {
	if x.BytesSuffix == nil {
		return n
	}
	n += fastpb.SizeBytes(6, x.GetBytesSuffix())
	return n
}

func (x *BytesValidate) sizeField7() (n int) {
	if x.BytesContain == nil {
		return n
	}
	n += fastpb.SizeBytes(7, x.GetBytesContain())
	return n
}

func (x *BytesValidate) sizeField8() (n int) {
	if x.BytesNotContain == nil {
		return n
	}
	n += fastpb.SizeBytes(8, x.GetBytesNotContain())
	return n
}

func (x *BytesValidate) sizeField9() (n int) {
	if x.BytesIn == nil {
		return n
	}
	n += fastpb.SizeBytes(9, x.GetBytesIn())
	return n
}

func (x *BytesValidate) sizeField10() (n int) {
	if x.BytesNotIn == nil {
		return n
	}
	n += fastpb.SizeBytes(10, x.GetBytesNotIn())
	return n
}

func (x *EnumValidate) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *EnumValidate) sizeField1() (n int) {
	if x.Enum1 == nil {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetEnum1()))
	return n
}

func (x *EnumValidate) sizeField2() (n int) {
	if x.Enum2 == nil {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetEnum2()))
	return n
}

func (x *EnumValidate) sizeField3() (n int) {
	if x.Enum3 == nil {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetEnum3()))
	return n
}

func (x *EnumValidate) sizeField4() (n int) {
	if x.EnumDefineOnly == nil {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetEnumDefineOnly()))
	return n
}

func (x *ListValidate) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ListValidate) sizeField1() (n int) {
	if len(x.ListMinSize) == 0 {
		return n
	}
	for i := range x.GetListMinSize() {
		n += fastpb.SizeString(1, x.GetListMinSize()[i])
	}
	return n
}

func (x *ListValidate) sizeField2() (n int) {
	if len(x.ListMaxSize) == 0 {
		return n
	}
	for i := range x.GetListMaxSize() {
		n += fastpb.SizeString(2, x.GetListMaxSize()[i])
	}
	return n
}

func (x *ListValidate) sizeField3() (n int) {
	if len(x.ListBaseElem) == 0 {
		return n
	}
	for i := range x.GetListBaseElem() {
		n += fastpb.SizeString(3, x.GetListBaseElem()[i])
	}
	return n
}

func (x *ListValidate) sizeField4() (n int) {
	if x.ListMsgElem == nil {
		return n
	}
	for i := range x.GetListMsgElem() {
		n += fastpb.SizeMessage(4, x.GetListMsgElem()[i])
	}
	return n
}

func (x *ListValidate) sizeField5() (n int) {
	if len(x.ListEnum) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(5, len(x.GetListEnum()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, int32(x.GetListEnum()[numIdxOrVal]))
			return n
		})
	return n
}

func (x *ListValidate) sizeField6() (n int) {
	if len(x.ListEnum2) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(6, len(x.GetListEnum2()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, int32(x.GetListEnum2()[numIdxOrVal]))
			return n
		})
	return n
}

func (x *MapValidate) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *MapValidate) sizeField1() (n int) {
	if x.MapISMinSize == nil {
		return n
	}
	for k, v := range x.GetMapISMinSize() {
		n += fastpb.SizeMapEntry(1,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *MapValidate) sizeField2() (n int) {
	if x.MapNoSparse == nil {
		return n
	}
	for k, v := range x.GetMapNoSparse() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *MapValidate) sizeField3() (n int) {
	if x.MapISKeyValue == nil {
		return n
	}
	for k, v := range x.GetMapISKeyValue() {
		n += fastpb.SizeMapEntry(3,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *MapValidate) sizeField4() (n int) {
	if x.EnumType11 == nil {
		return n
	}
	for k, v := range x.GetEnumType11() {
		n += fastpb.SizeMapEntry(4,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeInt32(numIdxOrVal, int32(v))
				return n
			})
	}
	return n
}

func (x *MapValidate) sizeField5() (n int) {
	if x.MapMsgKeyValue == nil {
		return n
	}
	for k, v := range x.GetMapMsgKeyValue() {
		n += fastpb.SizeMapEntry(5,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt32(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *FuncValidate) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *FuncValidate) sizeField1() (n int) {
	if x.Func1 == nil {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetFunc1())
	return n
}

func (x *Example) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Example) sizeField1() (n int) {
	if x.Msg == nil {
		return n
	}
	n += fastpb.SizeString(1, x.GetMsg())
	return n
}

func (x *Example) sizeField2() (n int) {
	if x.MaxLength == nil {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetMaxLength())
	return n
}

var fieldIDToName_IntValidate = map[int32]string{
	1: "Int32Const",
	2: "SIntLt",
	3: "SFix32Lte",
	4: "UIntGt",
	5: "Uint64Gte",
	6: "Fix32In",
	7: "Fix64Notin",
	8: "Reference",
}

var fieldIDToName_DoubleValidate = map[int32]string{
	1: "DoubleConst",
	2: "FloatLt",
	3: "DoubleLe",
	4: "DoubleGt",
	5: "DoubleGe",
	6: "DoubleIn",
	7: "DoubleNotin",
	8: "Reference",
}

var fieldIDToName_BoolValidator = map[int32]string{
	1: "BoolConst",
	2: "Reference",
}

var fieldIDToName_StringValidate = map[int32]string{
	1:  "StringConst",
	2:  "StringMinSize",
	3:  "StringMaxSize",
	4:  "StringPattern",
	5:  "StringPrefix",
	6:  "StringSuffix",
	7:  "StringContain",
	8:  "StringNotContain",
	9:  "StringIn",
	10: "StringNotIn",
}

var fieldIDToName_BytesValidate = map[int32]string{
	1:  "BytesConst",
	2:  "BytesMinSize",
	3:  "BytesMaxSize",
	4:  "BytesPattern",
	5:  "BytesPrefix",
	6:  "BytesSuffix",
	7:  "BytesContain",
	8:  "BytesNotContain",
	9:  "BytesIn",
	10: "BytesNotIn",
}

var fieldIDToName_EnumValidate = map[int32]string{
	1: "Enum1",
	2: "Enum2",
	3: "Enum3",
	4: "EnumDefineOnly",
}

var fieldIDToName_ListValidate = map[int32]string{
	1: "ListMinSize",
	2: "ListMaxSize",
	3: "ListBaseElem",
	4: "ListMsgElem",
	5: "ListEnum",
	6: "ListEnum2",
}

var fieldIDToName_MapValidate = map[int32]string{
	1: "MapISMinSize",
	2: "MapNoSparse",
	3: "MapISKeyValue",
	4: "EnumType11",
	5: "MapMsgKeyValue",
}

var fieldIDToName_FuncValidate = map[int32]string{
	1: "Func1",
}

var fieldIDToName_Example = map[int32]string{
	1: "Msg",
	2: "MaxLength",
}

var _ = api.File_api_proto
var _ = other.File_other_other_proto
