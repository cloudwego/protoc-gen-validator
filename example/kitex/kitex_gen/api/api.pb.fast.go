// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *FieldRules) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 19:
		offset, err = x.fastReadField19(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 22:
		offset, err = x.fastReadField22(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 23:
		offset, err = x.fastReadField23(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 24:
		offset, err = x.fastReadField24(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FieldRules[number], err)
}

func (x *FieldRules) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Const, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Lt, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Le, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Gt, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Ge, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.In = append(x.In, v)
	return offset, err
}

func (x *FieldRules) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.NotIn = append(x.NotIn, v)
	return offset, err
}

func (x *FieldRules) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Len, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.MinSize, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.MaxSize, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Pattern, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Prefix, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Suffix, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Contains, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.NotContains, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.DefinedOnly, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	x.NoSparse, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	var v FieldRules
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Key = &v
	return offset, nil
}

func (x *FieldRules) fastReadField19(buf []byte, _type int8) (offset int, err error) {
	var v FieldRules
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Value = &v
	return offset, nil
}

func (x *FieldRules) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	var v FieldRules
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Elem = &v
	return offset, nil
}

func (x *FieldRules) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	x.Skip, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField22(buf []byte, _type int8) (offset int, err error) {
	x.Required, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField23(buf []byte, _type int8) (offset int, err error) {
	x.NotNil, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) fastReadField24(buf []byte, _type int8) (offset int, err error) {
	x.Assert, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldRules) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField19(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	offset += x.fastWriteField22(buf[offset:])
	offset += x.fastWriteField23(buf[offset:])
	offset += x.fastWriteField24(buf[offset:])
	return offset
}

func (x *FieldRules) fastWriteField1(buf []byte) (offset int) {
	if x.Const == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetConst())
	return offset
}

func (x *FieldRules) fastWriteField2(buf []byte) (offset int) {
	if x.Lt == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetLt())
	return offset
}

func (x *FieldRules) fastWriteField3(buf []byte) (offset int) {
	if x.Le == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLe())
	return offset
}

func (x *FieldRules) fastWriteField4(buf []byte) (offset int) {
	if x.Gt == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetGt())
	return offset
}

func (x *FieldRules) fastWriteField5(buf []byte) (offset int) {
	if x.Ge == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetGe())
	return offset
}

func (x *FieldRules) fastWriteField6(buf []byte) (offset int) {
	if len(x.In) == 0 {
		return offset
	}
	for i := range x.GetIn() {
		offset += fastpb.WriteString(buf[offset:], 6, x.GetIn()[i])
	}
	return offset
}

func (x *FieldRules) fastWriteField7(buf []byte) (offset int) {
	if len(x.NotIn) == 0 {
		return offset
	}
	for i := range x.GetNotIn() {
		offset += fastpb.WriteString(buf[offset:], 7, x.GetNotIn()[i])
	}
	return offset
}

func (x *FieldRules) fastWriteField8(buf []byte) (offset int) {
	if x.Len == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetLen())
	return offset
}

func (x *FieldRules) fastWriteField9(buf []byte) (offset int) {
	if x.MinSize == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetMinSize())
	return offset
}

func (x *FieldRules) fastWriteField10(buf []byte) (offset int) {
	if x.MaxSize == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetMaxSize())
	return offset
}

func (x *FieldRules) fastWriteField11(buf []byte) (offset int) {
	if x.Pattern == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetPattern())
	return offset
}

func (x *FieldRules) fastWriteField12(buf []byte) (offset int) {
	if x.Prefix == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetPrefix())
	return offset
}

func (x *FieldRules) fastWriteField13(buf []byte) (offset int) {
	if x.Suffix == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 13, x.GetSuffix())
	return offset
}

func (x *FieldRules) fastWriteField14(buf []byte) (offset int) {
	if x.Contains == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetContains())
	return offset
}

func (x *FieldRules) fastWriteField15(buf []byte) (offset int) {
	if x.NotContains == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 15, x.GetNotContains())
	return offset
}

func (x *FieldRules) fastWriteField16(buf []byte) (offset int) {
	if x.DefinedOnly == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 16, x.GetDefinedOnly())
	return offset
}

func (x *FieldRules) fastWriteField17(buf []byte) (offset int) {
	if x.NoSparse == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 17, x.GetNoSparse())
	return offset
}

func (x *FieldRules) fastWriteField18(buf []byte) (offset int) {
	if x.Key == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 18, x.GetKey())
	return offset
}

func (x *FieldRules) fastWriteField19(buf []byte) (offset int) {
	if x.Value == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 19, x.GetValue())
	return offset
}

func (x *FieldRules) fastWriteField20(buf []byte) (offset int) {
	if x.Elem == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 20, x.GetElem())
	return offset
}

func (x *FieldRules) fastWriteField21(buf []byte) (offset int) {
	if x.Skip == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 21, x.GetSkip())
	return offset
}

func (x *FieldRules) fastWriteField22(buf []byte) (offset int) {
	if x.Required == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 22, x.GetRequired())
	return offset
}

func (x *FieldRules) fastWriteField23(buf []byte) (offset int) {
	if x.NotNil == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 23, x.GetNotNil())
	return offset
}

func (x *FieldRules) fastWriteField24(buf []byte) (offset int) {
	if x.Assert == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 24, x.GetAssert())
	return offset
}

func (x *FieldRules) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField19()
	n += x.sizeField20()
	n += x.sizeField21()
	n += x.sizeField22()
	n += x.sizeField23()
	n += x.sizeField24()
	return n
}

func (x *FieldRules) sizeField1() (n int) {
	if x.Const == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetConst())
	return n
}

func (x *FieldRules) sizeField2() (n int) {
	if x.Lt == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetLt())
	return n
}

func (x *FieldRules) sizeField3() (n int) {
	if x.Le == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLe())
	return n
}

func (x *FieldRules) sizeField4() (n int) {
	if x.Gt == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetGt())
	return n
}

func (x *FieldRules) sizeField5() (n int) {
	if x.Ge == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetGe())
	return n
}

func (x *FieldRules) sizeField6() (n int) {
	if len(x.In) == 0 {
		return n
	}
	for i := range x.GetIn() {
		n += fastpb.SizeString(6, x.GetIn()[i])
	}
	return n
}

func (x *FieldRules) sizeField7() (n int) {
	if len(x.NotIn) == 0 {
		return n
	}
	for i := range x.GetNotIn() {
		n += fastpb.SizeString(7, x.GetNotIn()[i])
	}
	return n
}

func (x *FieldRules) sizeField8() (n int) {
	if x.Len == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetLen())
	return n
}

func (x *FieldRules) sizeField9() (n int) {
	if x.MinSize == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetMinSize())
	return n
}

func (x *FieldRules) sizeField10() (n int) {
	if x.MaxSize == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetMaxSize())
	return n
}

func (x *FieldRules) sizeField11() (n int) {
	if x.Pattern == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetPattern())
	return n
}

func (x *FieldRules) sizeField12() (n int) {
	if x.Prefix == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetPrefix())
	return n
}

func (x *FieldRules) sizeField13() (n int) {
	if x.Suffix == "" {
		return n
	}
	n += fastpb.SizeString(13, x.GetSuffix())
	return n
}

func (x *FieldRules) sizeField14() (n int) {
	if x.Contains == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetContains())
	return n
}

func (x *FieldRules) sizeField15() (n int) {
	if x.NotContains == "" {
		return n
	}
	n += fastpb.SizeString(15, x.GetNotContains())
	return n
}

func (x *FieldRules) sizeField16() (n int) {
	if x.DefinedOnly == "" {
		return n
	}
	n += fastpb.SizeString(16, x.GetDefinedOnly())
	return n
}

func (x *FieldRules) sizeField17() (n int) {
	if x.NoSparse == "" {
		return n
	}
	n += fastpb.SizeString(17, x.GetNoSparse())
	return n
}

func (x *FieldRules) sizeField18() (n int) {
	if x.Key == nil {
		return n
	}
	n += fastpb.SizeMessage(18, x.GetKey())
	return n
}

func (x *FieldRules) sizeField19() (n int) {
	if x.Value == nil {
		return n
	}
	n += fastpb.SizeMessage(19, x.GetValue())
	return n
}

func (x *FieldRules) sizeField20() (n int) {
	if x.Elem == nil {
		return n
	}
	n += fastpb.SizeMessage(20, x.GetElem())
	return n
}

func (x *FieldRules) sizeField21() (n int) {
	if x.Skip == "" {
		return n
	}
	n += fastpb.SizeString(21, x.GetSkip())
	return n
}

func (x *FieldRules) sizeField22() (n int) {
	if x.Required == "" {
		return n
	}
	n += fastpb.SizeString(22, x.GetRequired())
	return n
}

func (x *FieldRules) sizeField23() (n int) {
	if x.NotNil == "" {
		return n
	}
	n += fastpb.SizeString(23, x.GetNotNil())
	return n
}

func (x *FieldRules) sizeField24() (n int) {
	if x.Assert == "" {
		return n
	}
	n += fastpb.SizeString(24, x.GetAssert())
	return n
}

var fieldIDToName_FieldRules = map[int32]string{
	1:  "Const",
	2:  "Lt",
	3:  "Le",
	4:  "Gt",
	5:  "Ge",
	6:  "In",
	7:  "NotIn",
	8:  "Len",
	9:  "MinSize",
	10: "MaxSize",
	11: "Pattern",
	12: "Prefix",
	13: "Suffix",
	14: "Contains",
	15: "NotContains",
	16: "DefinedOnly",
	17: "NoSparse",
	18: "Key",
	19: "Value",
	20: "Elem",
	21: "Skip",
	22: "Required",
	23: "NotNil",
	24: "Assert",
}

var _ = descriptorpb.File_google_protobuf_descriptor_proto
